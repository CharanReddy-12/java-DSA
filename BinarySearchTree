import javax.swing.tree.TreeNode;
class BinarySearchTree
 {
    class Node 
    {
        int key;
        Node left, right;
        public Node(int item) 
        {
            key = item;
            left = right = null;
        }
    }
    Node root;
    BinarySearchTree() 
    {
        root = null;
    }
    void insert(int key)
    {
        root = insertRec(root, key);
    }
    Node insertRec(Node root, int key) 
    {
        if (root == null) 
        {
            root = new Node(key);
            return root;
        }
        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);
        return root;
    }
    void inorder() 
    {
        inorderRec(root);
    }
    void inorderRec(Node root) 
    {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " ");
            inorderRec(root.right);
        }
    }
    void preorder()
    {
        preorderRec(root);
    }
     void preorderRec(Node root) 
    {
        if (root != null) {
            System.out.print(root.key + " ");
            inorderRec(root.left);
            inorderRec(root.right);
        }
    }
    void postorder()
    {
        postorderRec(root);
    }
    void postorderRec(Node root) 
    {
        if (root != null) {
            inorderRec(root.left);
            inorderRec(root.right);
            System.out.print(root.key + " ");

        }
    }

    public static void main(String[] args) 
    {
        int[] values={13,48,22,57,91,36,81,4,75,29,65,18,93,41,54,24,69,8,79,33,50,16,87,28,61,44,19,97,72,11};
        BinarySearchTree tree=new BinarySearchTree();
        for(int value:values){
            tree.insert(value);
        }
        System.out.print("Inorder traversal: ");
        tree.inorder();
        System.out.println();

        System.out.print("Preorder traversal: ");
        tree.preorder();
        System.out.println();

        System.out.print("Postorder traversal: ");
        tree.postorder();
        System.out.println();


    }
}
